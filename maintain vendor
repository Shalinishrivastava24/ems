//Initialize a new Node.js project, install Express.js, and set up your project structure:
mkdir user-management-app
cd user-management-app
npm init -y
npm install express body-parser

//folder structure
user-management-app/
|-- server.js
|-- public/
|   |-- index.html
|   |-- style.css
|   |-- script.js

//server.js file, set up your Express application and create API endpoints for user and membership management
const express = require('express');
const bodyParser = require('body-parser');
const app = express();
const port = process.env.PORT || 3000;

// Parse JSON requests
app.use(bodyParser.json());

// In-memory storage (replace with a database in production)
const users = [];
const memberships = [];

// API endpoints for user management
app.get('/api/users', (req, res) => {
  res.json(users);
});

app.post('/api/users', (req, res) => {
  const newUser = req.body;
  users.push(newUser);
  res.json(newUser);
});

app.put('/api/users/:id', (req, res) => {
  const userId = req.params.id;
  const updatedUser = req.body;

  const userIndex = users.findIndex((user) => user.id === userId);

  if (userIndex === -1) {
    res.status(404).json({ message: 'User not found' });
  } else {
    users[userIndex] = { ...users[userIndex], ...updatedUser };
    res.json(users[userIndex]);
  }
});

// API endpoints for membership management
app.get('/api/memberships', (req, res) => {
  res.json(memberships);
});

app.post('/api/memberships', (req, res) => {
  const newMembership = req.body;
  memberships.push(newMembership);
  res.json(newMembership);
});

app.put('/api/memberships/:id', (req, res) => {
  const membershipId = req.params.id;
  const updatedMembership = req.body;

  const membershipIndex = memberships.findIndex((membership) => membership.id === membershipId);

  if (membershipIndex === -1) {
    res.status(404).json({ message: 'Membership not found' });
  } else {
    memberships[membershipIndex] = { ...memberships[membershipIndex], ...updatedMembership };
    res.json(memberships[membershipIndex]);
  }
});

app.listen(port, () => {
  console.log(`Server is running on port ${port}`);
});

//in public/index.html file, create a simple interface for user and membership management.
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>User and Membership Management</title>
    <link rel="stylesheet" href="style.css">
</head>
<body>
    <h1>User Management</h1>
    <div id="userManagement">
        <!-- User management interface goes here -->
    </div>

    <h1>Membership Management</h1>
    <div id="membershipManagement">
        <!-- Membership management interface goes here -->
    </div>

    <script src="script.js"></script>
</body>
</html>
